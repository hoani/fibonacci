# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import fibonacci_pb2 as fibonacci__pb2


class FibonacciStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AtIndex = channel.unary_unary(
                '/fibonacci.Fibonacci/AtIndex',
                request_serializer=fibonacci__pb2.Number.SerializeToString,
                response_deserializer=fibonacci__pb2.Number.FromString,
                )
        self.GetSequence = channel.unary_stream(
                '/fibonacci.Fibonacci/GetSequence',
                request_serializer=fibonacci__pb2.Number.SerializeToString,
                response_deserializer=fibonacci__pb2.Number.FromString,
                )
        self.SumIndicies = channel.stream_unary(
                '/fibonacci.Fibonacci/SumIndicies',
                request_serializer=fibonacci__pb2.Number.SerializeToString,
                response_deserializer=fibonacci__pb2.Number.FromString,
                )
        self.StreamSequence = channel.stream_stream(
                '/fibonacci.Fibonacci/StreamSequence',
                request_serializer=fibonacci__pb2.Number.SerializeToString,
                response_deserializer=fibonacci__pb2.Number.FromString,
                )


class FibonacciServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AtIndex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSequence(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SumIndicies(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamSequence(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FibonacciServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AtIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.AtIndex,
                    request_deserializer=fibonacci__pb2.Number.FromString,
                    response_serializer=fibonacci__pb2.Number.SerializeToString,
            ),
            'GetSequence': grpc.unary_stream_rpc_method_handler(
                    servicer.GetSequence,
                    request_deserializer=fibonacci__pb2.Number.FromString,
                    response_serializer=fibonacci__pb2.Number.SerializeToString,
            ),
            'SumIndicies': grpc.stream_unary_rpc_method_handler(
                    servicer.SumIndicies,
                    request_deserializer=fibonacci__pb2.Number.FromString,
                    response_serializer=fibonacci__pb2.Number.SerializeToString,
            ),
            'StreamSequence': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamSequence,
                    request_deserializer=fibonacci__pb2.Number.FromString,
                    response_serializer=fibonacci__pb2.Number.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fibonacci.Fibonacci', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Fibonacci(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AtIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fibonacci.Fibonacci/AtIndex',
            fibonacci__pb2.Number.SerializeToString,
            fibonacci__pb2.Number.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSequence(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/fibonacci.Fibonacci/GetSequence',
            fibonacci__pb2.Number.SerializeToString,
            fibonacci__pb2.Number.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SumIndicies(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/fibonacci.Fibonacci/SumIndicies',
            fibonacci__pb2.Number.SerializeToString,
            fibonacci__pb2.Number.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamSequence(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/fibonacci.Fibonacci/StreamSequence',
            fibonacci__pb2.Number.SerializeToString,
            fibonacci__pb2.Number.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
